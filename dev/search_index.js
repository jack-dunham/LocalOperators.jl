var documenterSearchIndex = {"docs":
[{"location":"_index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"_index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"CurrentModule = LocalOperators","category":"page"},{"location":"library/#Contructors","page":"Library","title":"Contructors","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"LocalOperator","category":"page"},{"location":"library/#Methods-for-getting-information-about-LocalOperator-types","page":"Library","title":"Methods for getting information about LocalOperator types","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"support\nminsupport\nmaxsupport\nlocality\nlocaldim\ndim","category":"page"},{"location":"library/#LocalOperators.support","page":"Library","title":"LocalOperators.support","text":"support(A::LocalOperator)\n\nReturns the support of A as a UnitRange type. That is, returns the range of indices that the local operator A is defined on. Equivalent to A.support or getfield(A, :support). See also maxsupport and minsupport.\n\n\n\n\n\n","category":"function"},{"location":"library/#LocalOperators.minsupport","page":"Library","title":"LocalOperators.minsupport","text":"minsupport(A::LocalOperator)\n\nReturns the lowest site index that A has support on. See also support and maxsupport.\n\n\n\n\n\n","category":"function"},{"location":"library/#LocalOperators.maxsupport","page":"Library","title":"LocalOperators.maxsupport","text":"maxsupport(A::LocalOperator)\n\nReturns the highest site index that A has support on. See also support and minsupport\n\n\n\n\n\n","category":"function"},{"location":"library/#LocalOperators.locality","page":"Library","title":"LocalOperators.locality","text":"locality(A::LocalOperator)\n\nReturns the locality of A. That is, returns the number of sites that A has support on.\n\n\n\n\n\n","category":"function"},{"location":"library/#LocalOperators.localdim","page":"Library","title":"LocalOperators.localdim","text":"localdim(A::LocalOperator)\n\nReturns the dimension of the local vector spaces that form the tensor product space that A has support on.\n\n\n\n\n\n","category":"function"},{"location":"library/#LocalOperators.dim","page":"Library","title":"LocalOperators.dim","text":"dim(A::LocalOperator)\n\nReturns the dimension of the tensor product space corresponding to the support of A. \n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using LocalOperators\nend","category":"page"},{"location":"#LocalOperators.jl","page":"Home","title":"LocalOperators.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LocalOperators.jl is a simple package that exports a single struct type, LocalOperator representing an operator acting on a local Hilbert space. When adding, subtracting or multiplying two LocalOperator types together,the appropriate number of identity matrices are padded to each on the left and right such that they are compatible. ","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LocalOperators.jl exports only a single struct type:","category":"page"},{"location":"","page":"Home","title":"Home","text":"LocalOperator","category":"page"},{"location":"#LocalOperators.LocalOperator","page":"Home","title":"LocalOperators.LocalOperator","text":"LocalOperator{T<:Number} <: AbstractMatrix{T}\n\nConcrete type corresponding to a matrix operator acting on a tensor product of local vector  spaces. The operator acts as the matrix stored in the field data on the local vector spaces defined by the field support, and as the identity elsewhere. \n\nFields\n\ndata::Matrix{T}: stores the matrix represention of the operator\nsupport::UnitRange{Int}: stores the sites that the operator has support on\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"A LocalOperator can be constructed like so:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Z = Matrix{ComplexF64}([1 0; 0 -1]); # Pauli Z matrix\n\njulia> r = 0:0;                             # Support on site 0 only\n\njulia> a = LocalOperator(Z, r)\n2×2 1-local LocalOperator{ComplexF64} on sites 0 to 0:\n 1.0+0.0im   0.0+0.0im\n 0.0+0.0im  -1.0+0.0im","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can also supply an integer instead of a range to easily construct a 1-local operator,","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> b = LocalOperator(Z, 2)\n2×2 1-local LocalOperator{ComplexF64} on sites 2 to 2:\n 1.0+0.0im   0.0+0.0im\n 0.0+0.0im  -1.0+0.0im","category":"page"},{"location":"","page":"Home","title":"Home","text":"or omit this entirely to use the default index 0. We can now multiply a and b together to perform (a otimes mathbbI) cdot (mathbbI otimes b):","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> a * b \n4×4 2-local LocalOperator{ComplexF64} on sites 0 to 1:\n 1.0+0.0im   0.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.0+0.0im  -1.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.0+0.0im   0.0+0.0im  -1.0+0.0im  0.0+0.0im\n 0.0+0.0im   0.0+0.0im   0.0+0.0im  1.0+0.0im","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can also do addition and subtraction","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> a + b \n4×4 2-local LocalOperator{ComplexF64} on sites 0 to 1:\n 2.0+0.0im  0.0+0.0im  0.0+0.0im   0.0+0.0im\n 0.0+0.0im  0.0+0.0im  0.0+0.0im   0.0+0.0im\n 0.0+0.0im  0.0+0.0im  0.0+0.0im   0.0+0.0im\n 0.0+0.0im  0.0+0.0im  0.0+0.0im  -2.0+0.0im\n\njulia> b - a \n4×4 2-local LocalOperator{ComplexF64} on sites 0 to 1:\n 0.0+0.0im   0.0+0.0im  0.0+0.0im  0.0+0.0im\n 0.0+0.0im  -2.0+0.0im  0.0+0.0im  0.0+0.0im\n 0.0+0.0im   0.0+0.0im  2.0+0.0im  0.0+0.0im\n 0.0+0.0im   0.0+0.0im  0.0+0.0im  0.0+0.0im","category":"page"},{"location":"","page":"Home","title":"Home","text":"If two LocalOperator types have support on the identical sites, then we fall back to the regular operations:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> a - a\n2×2 1-local LocalOperator{ComplexF64} on sites 0 to 0:\n 0.0+0.0im  0.0+0.0im\n 0.0+0.0im  0.0+0.0im","category":"page"},{"location":"","page":"Home","title":"Home","text":"Operations between LocalOperator types with differing local dimension are not supported:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> a = LocalOperator([1 0; 0 -1], 0:0, 2);\n\njulia> b = LocalOperator([1 0 0; 0 0 0 ; 0 0 -1], 1:1, 3);\n\njulia> a * b\nERROR: LocalDimensionMismatch: local dimensions must match: a has local dim 2, b has local dim 3\n[...]","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = nothing","category":"page"}]
}
